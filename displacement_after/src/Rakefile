# -*- coding: utf-8 -*-
require 'fileutils'
require 'tmpdir'
require 'kshramt'

fortran_options = %w[
  -Wall
  -ffree-line-length-none
  -cpp
  -C
  -fmax-identifier-length=63
  -fbacktrace -pipe
].join(' ')

# ~/.config/displacement_after/config.yamlを編集することで、コンパイラなどを変更できる。
CONFIG = Class.new.class_eval{
  include Kshramt::Config
}.new('displacement_after',
      rake: 'rake1.9',
      cpp: 'cpp-mp-4.8', cpp_options: "-C",
      fortran: 'gfortran-mp-4.8', fortran_options: fortran_options)

exes = []
BIN = lambda{|file|
  exes << (exe = File.join('../bin', file))
  exe
}
MODULES = lambda{|*files|
  files.flatten.map{|f| %w[.o .mod].map{|suf| f + suf}}.flatten
}

[
 :test,
].each{|t|
  desc "上のディレクトリのRakefileに委譲される"
  task t do
    FileUtils.cd('..'){sh "#{CONFIG.rake} #{t}"}
  end
}

file BIN["displacement_after.exe"] => MODULES[%w[lib_character lib_io lib_displacement_after]] + ['displacement_after.o'] do |t|
  sh "#{CONFIG.fortran} #{CONFIG.fortran_options} -o #{t.name} #{t.prerequisites.delete_if{|f| f =~ /\.mod\z/}.join(' ')}"
end

%w[.o .mod].each{|suf|
  rule suf => ".f90" do |t|
    Dir.mktmpdir{|tmpdir|
      tempfile = File.join(tmpdir, t.source)
      FileUtils.mkdir_p File.dirname(tempfile)
      sh "#{CONFIG.cpp} #{CONFIG.cpp_options} #{t.source} > #{tempfile}" # ifort対応で、個別にcppしている。
      sh "#{CONFIG.fortran} #{CONFIG.fortran_options} -c #{tempfile}"
    }
  end
}

task default: :compile

desc "プログラムをコンパイルする"
task compile: exes
